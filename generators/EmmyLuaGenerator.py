from generators.BaseGenerator import BaseGenerator


fileOpener: str = """---@meta
-- Generated by PZEventDoc https://github.com/demiurgeQuantified/PZEventDoc

-- If it helped you, please consider leaving me a tip ^u^
-- https://ko-fi.com/starseamstress
"""


class EmmyLuaGenerator(BaseGenerator):
    def __init__(self, wantDeprecated):
        BaseGenerator.__init__(self, wantDeprecated)
        self.initialisedTables = []
        self.currentIndentation = 0

    def writeLine(self, text: str):
        self.totalString += "    " * self.currentIndentation + text + "\n"

    def beginFile(self):
        self.totalString = fileOpener

    @staticmethod
    def getFunctionSignature(params: dict) -> str:
        if not isinstance(params, dict) or len(params) == 0:
            return "function"

        formattedParams = ""
        doComma = False
        for label in params:
            if doComma:
                formattedParams += ","
            else:
                doComma = True

            formattedParams += label + ":" + params[label]

        return "fun({}):any".format(formattedParams)

    @staticmethod
    def formatFunction(name: str, args: list = None) -> str:
        formattedArgs = ""
        if not (args is None or len(args) == 0):
            formattedArgs = args[0]
            for label in args[1:]:
                formattedArgs += ", " + label

        return "{} = function({}) end,".format(name, formattedArgs)

    def documentFunction(self, name: str, params: dict | list = None):
        def writeFuncParam(params: dict):
            self.writeLine("---@param func " + self.getFunctionSignature(params))

        # EmmyLua doesn't seem to support overloads specifying function parameters, but maybe in the future
        if isinstance(params, list):
            writeFuncParam(params[0])
            for i in range(1, len(params)):
                self.writeLine("---@overload fun(func:" + self.getFunctionSignature(params[i]) + ")")
        else:
            writeFuncParam(params)

        self.writeLine(self.formatFunction(name, ["func"]))

    def initTable(self, name: str):
        self.writeLine(name + " = {}")
        self.initialisedTables.append(name)

    def document(self, name: str, data: dict, tableType="Events"):
        deprecated: bool = data.get("deprecated", False)
        if not self.checkAllowDeprecated(deprecated):
            return

        if tableType not in self.initialisedTables:
            self.initTable(tableType)

        if deprecated:
            self.writeLine("---@deprecated")

        self.writeLine("---" + self.getDescription(data.get("description", ""), deprecated, data.get("context", {})))
        self.writeLine(tableType + "." + name + " = {")
        self.currentIndentation += 1

        self.documentFunction("Add", data.get("parameters"))
        self.documentFunction("Remove")

        self.currentIndentation -= 1
        self.writeLine("}")

    def documentHook(self, name: str, data: dict):
        self.document(name, data, "Hook")

    def documentEvent(self, name: str, data: dict):
        self.document(name, data, "Events")
